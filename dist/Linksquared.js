/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Linksquared"] = factory();
	else
		root["Linksquared"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _linksquared_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./linksquared.js */ \"./src/linksquared.js\");\n // Assuming your class is in linksquared.js\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_linksquared_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]); // Ensure this line correctly exports the class\n\n\n//# sourceURL=webpack://Linksquared/./src/index.js?");

/***/ }),

/***/ "./src/linksquared.js":
/*!****************************!*\
  !*** ./src/linksquared.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _linksquared_manager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./linksquared_manager.js */ \"./src/linksquared_manager.js\");\n\n\n/**\n * Entry point for the Linksquared SDK.\n * Provides methods to initialize and interact with the SDK.\n */\nclass Linksquared {\n  /**\n   * Creates an instance of the Linksquared SDK.\n   * @param {string} APIKey - The API key for authentication.\n   * @param {Function} linkHandlingCallback - Callback function to handle Linksquared data.\n   */\n  constructor(APIKey, linkHandlingCallback) {\n    this.manager = new _linksquared_manager_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](APIKey, linkHandlingCallback);\n  }\n\n  /**\n   * Starts the Linksquared SDK by authenticating with the API.\n   * Optionally takes a callback that is called upon successful authentication.\n   * @param {Function} [succesfullAuthenticatedCallback=null] - Callback to invoke on successful authentication.\n   */\n  start(succesfullAuthenticatedCallback = null) {\n    this.manager.authenticate(succesfullAuthenticatedCallback);\n  }\n\n  /**\n   * Creates a link with the Linksquared API.\n   * @param {string} title - The title of the link.\n   * @param {string} subtitle - The subtitle of the link.\n   * @param {string} imageURL - The URL of the image associated with the link.\n   * @param {Object} data - Additional data for the link.\n   * @param {Function} success - Success callback for creating the link.\n   * @param {Function} error - Error callback for creating the link.\n   */\n  createLink(title, subtitle, imageURL, data, success, error) {\n    this.manager.createLink(title, subtitle, imageURL, data, success, error);\n  }\n\n  /**\n   * Retrieves the user identifier from the manager.\n   * @returns {string|null} The user identifier.\n   */\n  userIdentifier() {\n    return this.manager.userIdentifier();\n  }\n\n  /**\n   * Retrieves the user attributes from the manager.\n   * @returns {Object|null} The user attributes.\n   */\n  userAttributes() {\n    return this.manager.userAttributes();\n  }\n\n  /**\n   * Sets the user identifier in the manager.\n   * @param {string} identifier - The user identifier to set.\n   * @returns {void}\n   */\n  setUserIdentifier(identifier) {\n    this.manager.setUserIdentifier(identifier);\n  }\n\n  /**\n   * Sets the user attributes in the manager.\n   * @param {Object} attributes - A dictionary of user attributes to set.\n   * @returns {void}\n   */\n  setUserAttributes(attributes) {\n    this.manager.setUserAttributes(attributes);\n  }\n\n  /**\n   * Checks if the SDK is authenticated.\n   *\n   * This method returns the authentication status of the SDK. It will return true if the\n   * SDK is currently authenticated, and false otherwise.\n   *\n   * @returns {boolean} - The authentication status of the manager.\n   */\n  authenticated() {\n    return this.manager.authenticated;\n  }\n  /**\n   * Displays the messages list using the manager.\n   * This method triggers the display of the messages list in the UI.\n   * @returns {void}\n   */\n  showMessagesList() {\n    this.manager.showMessagesList();\n  }\n\n  /**\n   * Retrieves messages for a specific page using the manager.\n   * @param {number} page - The page number to retrieve messages from.\n   * @param {Function} response - Callback to handle the retrieved messages.\n   * @param {Function} error - Callback to handle any errors during retrieval.\n   * @returns {void}\n   */\n  getMessages(page, response, error) {\n    this.manager.getMessages(page, response, error);\n  }\n\n  /**\n   * Retrieves the number of unread messages using the manager.\n   * @param {Function} response - Callback to handle the count of unread messages.\n   * @param {Function} error - Callback to handle any errors during retrieval.\n   * @returns {void}\n   */\n  getNumberOfUnreadMessages(response, error) {\n    this.manager.getNumberOfUnreadMessages(response, error);\n  }\n\n  /**\n   * Returns all the received data since startup.\n   * @returns {Array} Array of all received data objects.\n   */\n  getAllReceivedData() {\n    return this.manager.getAllReceivedData();\n  }\n\n  /**\n   * Marks a message as read\n   * @param {Message} message - The message to be marked as read\n   * @param {Function} response - Callback for success.\n   * @param {Function} error - Callback for error.\n   */\n  markMessageAsRead(message, response, error) {\n    this.manager.markMessageAsRead(message, response, error);\n  }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Linksquared);\n\n\n//# sourceURL=webpack://Linksquared/./src/linksquared.js?");

/***/ }),

/***/ "./src/linksquared_api_service.js":
/*!****************************************!*\
  !*** ./src/linksquared_api_service.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _linksquared_api_service_helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./linksquared_api_service_helper */ \"./src/linksquared_api_service_helper.js\");\n/* harmony import */ var _linksquared_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./linksquared_context */ \"./src/linksquared_context.js\");\n// Import the helper class for making API requests\n\n\n\n// Define the Linksquared API service class\nclass LinksquaredAPIService {\n  // Define endpoint paths as static properties\n  static ENDPOINTS = {\n    AUTHENTICATE: \"/authenticate\",\n    PAYLOAD: \"/data_for_device\",\n    CREATE_EVENT: \"/event\",\n    CREATE_LINK: \"/create_link\",\n    USER_ATTRIBUTES: \"/visitor_attributes\",\n    PAYLOAD_FOR_DEVICE_AND_PATH: \"/data_for_device_and_path\",\n    NOTIFICATIONS_FOR_DEVICE: \"/notifications_for_device\",\n    MARK_NOTIFICATION_AS_READ: \"/mark_notification_as_read\",\n    NOTIFICATIONS_TO_DISPLAY_AUTOMATICALLY:\n      \"/notifications_to_display_automatically\",\n    NUMBER_OF_UNREAD_MESSAGES: \"/number_of_unread_notifications\",\n  };\n\n  // Constructor to initialize the API service helper\n  constructor() {\n    this.apiService = new _linksquared_api_service_helper__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n  }\n\n  // Method to authenticate a device\n  authenticateDevice(details, response, error) {\n    this.apiService.POST(\n      LinksquaredAPIService.ENDPOINTS.AUTHENTICATE,\n      details,\n      response,\n      error\n    );\n  }\n\n  // Method to fetch payload for a device\n  payloadForDevice(details, response, error) {\n    this.apiService.POST(\n      LinksquaredAPIService.ENDPOINTS.PAYLOAD,\n      details,\n      response,\n      error\n    );\n  }\n\n  // Method to fetch payload for a device and path\n  payloadForDeviceAndPath(details, path, response, error) {\n    const dataToSend = { ...details, path };\n    this.apiService.POST(\n      LinksquaredAPIService.ENDPOINTS.PAYLOAD_FOR_DEVICE_AND_PATH,\n      dataToSend,\n      response,\n      error\n    );\n  }\n\n  // Method to create an event\n  createEvent(event, createdAt, path, engagementTime, response, error) {\n    const data = { event };\n    if (path) data.path = path;\n    if (engagementTime) data.engagement_time = engagementTime;\n\n    const isoDate = new Date(createdAt).toISOString();\n    data.created_at = isoDate;\n\n    this.apiService.POST(\n      LinksquaredAPIService.ENDPOINTS.CREATE_EVENT,\n      data,\n      response,\n      error\n    );\n  }\n\n  // Method to create a link\n  createLink(title, subtitle, imageUrl, data, response, error) {\n    const dataToSend = {};\n    if (title) dataToSend.title = title;\n    if (subtitle) dataToSend.subtitle = subtitle;\n    if (imageUrl) dataToSend.image_url = imageUrl;\n    if (data) dataToSend.data = JSON.stringify(data);\n\n    console.log(\"dataToSend \", dataToSend);\n\n    this.apiService.POST(\n      LinksquaredAPIService.ENDPOINTS.CREATE_LINK,\n      dataToSend,\n      response,\n      error\n    );\n  }\n\n  // Method to set attributes\n  setUserAttributes(response, error) {\n    const dataToSend = {};\n    dataToSend.sdk_identifier = _linksquared_context__WEBPACK_IMPORTED_MODULE_1__[\"default\"].USER_IDENTIFIER;\n    if (_linksquared_context__WEBPACK_IMPORTED_MODULE_1__[\"default\"].USER_ATTRIBUTES) {\n      dataToSend.sdk_attributes = _linksquared_context__WEBPACK_IMPORTED_MODULE_1__[\"default\"].USER_ATTRIBUTES;\n    }\n\n    this.apiService.POST(\n      LinksquaredAPIService.ENDPOINTS.USER_ATTRIBUTES,\n      dataToSend,\n      response,\n      error\n    );\n  }\n\n  messagesForDevice(page, response, error) {\n    const dataToSend = { page: page };\n\n    this.apiService.POST(\n      LinksquaredAPIService.ENDPOINTS.NOTIFICATIONS_FOR_DEVICE,\n      dataToSend,\n      response,\n      error\n    );\n  }\n\n  markMessageAsViewed(message, response, error) {\n    const dataToSend = { id: message.id };\n    this.apiService.POST(\n      LinksquaredAPIService.ENDPOINTS.MARK_NOTIFICATION_AS_READ,\n      dataToSend,\n      response,\n      error\n    );\n  }\n\n  messagesForAutomaticDisplay(response, error) {\n    this.apiService.GET(\n      LinksquaredAPIService.ENDPOINTS.NOTIFICATIONS_TO_DISPLAY_AUTOMATICALLY,\n      null,\n      response,\n      error\n    );\n  }\n\n  numberOfUnreadMessages(response, error) {\n    this.apiService.GET(\n      LinksquaredAPIService.ENDPOINTS.NUMBER_OF_UNREAD_MESSAGES,\n      null,\n      response,\n      error\n    );\n  }\n}\n\n// Export the LinksquaredAPIService class\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LinksquaredAPIService);\n\n\n//# sourceURL=webpack://Linksquared/./src/linksquared_api_service.js?");

/***/ }),

/***/ "./src/linksquared_api_service_helper.js":
/*!***********************************************!*\
  !*** ./src/linksquared_api_service_helper.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _linksquared_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./linksquared_context */ \"./src/linksquared_context.js\");\n\n\n/**\n * Helper class for making API requests to Linksquared service.\n */\nclass LinksquaredAPIServiceHelper {\n  // Endpoint URL for the Linksquared API\n  static ENDPOINT = \"https://sdk.sqd.link/api/v1/sdk\";\n  // static ENDPOINT = \"http://sdk.lvh.me:3000/api/v1/sdk\";\n\n  /**\n   * Constructor for LinksquaredAPIServiceHelper.\n   * @param {string} APIKey - API key for accessing the Linksquared API.\n   */\n  constructor(APIKey) {\n    this.APIKey = APIKey;\n  }\n\n  /**\n   * Perform a POST request to the Linksquared API.\n   * @param {string} path - API endpoint path.\n   * @param {Object} data - Data to be sent in the request body.\n   * @param {Function} success - Success callback function.\n   * @param {Function} error - Error callback function.\n   */\n  POST(path, data, success, error) {\n    const headers = this.buildHeaders();\n    const endpoint = LinksquaredAPIServiceHelper.ENDPOINT + path;\n\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", endpoint, true);\n\n    // Set request headers\n    for (const key in headers) {\n      xhr.setRequestHeader(key, headers[key]);\n    }\n\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState === XMLHttpRequest.DONE) {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          const response = xhr.responseText;\n          success(JSON.parse(response));\n        } else {\n          error(xhr.statusText);\n        }\n      }\n    };\n\n    xhr.send(JSON.stringify(data));\n  }\n\n  GET(path, data, success, error) {\n    const headers = this.buildHeaders();\n    const endpoint = LinksquaredAPIServiceHelper.ENDPOINT + path;\n\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", endpoint, true);\n\n    // Set request headers\n    for (const key in headers) {\n      xhr.setRequestHeader(key, headers[key]);\n    }\n\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState === XMLHttpRequest.DONE) {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          const response = xhr.responseText;\n          success(JSON.parse(response));\n        } else {\n          error(xhr.statusText);\n        }\n      }\n    };\n\n    xhr.send(JSON.stringify(data));\n  }\n\n  /**\n   * Build request headers for the API request.\n   * @returns {Object} - Request headers.\n   */\n  buildHeaders() {\n    const headers = {};\n    headers[\"Content-Type\"] = \"application/json\";\n    headers[\"PLATFORM\"] = \"web\";\n\n    // Get identifier\n    const { protocol, hostname, port } = window.location;\n    const portPart = port ? `:${port}` : \"\";\n    const fullURL = `${protocol}//${hostname}${portPart}`;\n\n    // Add domain identifier header\n    if (window && window.location) {\n      headers[\"IDENTIFIER\"] = fullURL;\n    }\n\n    // Add Linksquared ID header\n    if (_linksquared_context__WEBPACK_IMPORTED_MODULE_0__[\"default\"].LINKSQUARED_ID) {\n      headers[\"LINKSQUARED\"] = _linksquared_context__WEBPACK_IMPORTED_MODULE_0__[\"default\"].LINKSQUARED_ID;\n    }\n\n    // Add API key header\n    if (_linksquared_context__WEBPACK_IMPORTED_MODULE_0__[\"default\"].API_KEY) {\n      headers[\"PROJECT_KEY\"] = _linksquared_context__WEBPACK_IMPORTED_MODULE_0__[\"default\"].API_KEY;\n    }\n\n    return headers;\n  }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LinksquaredAPIServiceHelper);\n\n\n//# sourceURL=webpack://Linksquared/./src/linksquared_api_service_helper.js?");

/***/ }),

/***/ "./src/linksquared_context.js":
/*!************************************!*\
  !*** ./src/linksquared_context.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _linksquared_device_details__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./linksquared_device_details */ \"./src/linksquared_device_details.js\");\n// Import the LinksquaredDeviceDetails module\n\n\n// Define the LinksquaredContext class\nclass LinksquaredContext {\n  // Static properties to store API key and Linksquared ID\n  static API_KEY = null;\n\n  static get LINKSQUARED_ID() {\n    return _linksquared_device_details__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getCookieValue(\"linksquared\");\n  }\n\n  /**\n   * Set Linksquared ID cookie.\n   * @param {string} id - Linksquared ID to be stored in the cookie.\n   */\n  static setLinksquaredIDCookie(id) {\n    _linksquared_device_details__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setCookie(\"linksquared\", id);\n  }\n\n  /**\n   * Static property to store the user identifier.\n   * @type {string|null}\n   */\n  static USER_IDENTIFIER = null;\n\n  /**\n   * Static property to store the user attributes.\n   * @type {Object|null}\n   */\n  static USER_ATTRIBUTES = null;\n}\n\n// Export the LinksquaredContext class\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LinksquaredContext);\n\n\n//# sourceURL=webpack://Linksquared/./src/linksquared_context.js?");

/***/ }),

/***/ "./src/linksquared_device_details.js":
/*!*******************************************!*\
  !*** ./src/linksquared_device_details.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// Define the LinksquaredDeviceDetails class\nclass LinksquaredDeviceDetails {\n  /**\n   * Get current device details.\n   * @returns {Object} - Object containing user agent, app version, and build.\n   */\n  static currentDetails() {\n    const userAgent = navigator.userAgent;\n\n    // Initialize return values object\n    const returnValues = {\n      user_agent: userAgent,\n      app_version: \"0\",\n      build: \"0\",\n    };\n\n    return returnValues;\n  }\n\n  /**\n   * Get the value of a cookie by name.\n   * @param {string} cookieName - Name of the cookie to retrieve.\n   * @returns {string|null} - Value of the cookie, or null if not found.\n   */\n  static getCookieValue(cookieName) {\n    const cookies = document.cookie.split(\";\"); // Split cookies into an array\n    for (let cookie of cookies) {\n      const [name, value] = cookie.trim().split(\"=\"); // Split each cookie into name and value\n      if (name === cookieName) {\n        return decodeURIComponent(value); // Return the decoded cookie value\n      }\n    }\n    return null; // Return null if the cookie is not found\n  }\n\n  /**\n   * Set a cookie with the given name and value.\n   * @param {string} cookieName - Name of the cookie to set.\n   * @param {string} cookieValue - Value to set for the cookie.\n   */\n  static setCookie(cookieName, cookieValue) {\n    // Set expiration date to a far-future date\n    const farFutureDate = new Date(\"9999-12-31\");\n    const expires = \"expires=\" + farFutureDate.toUTCString();\n\n    // Set the cookie\n    document.cookie =\n      cookieName +\n      \"=\" +\n      encodeURIComponent(cookieValue) +\n      \";\" +\n      expires +\n      \";path=/\";\n  }\n\n  /**\n   * Get the value of the \"linksquared\" parameter from the current URL.\n   * @returns {string|null} - Value of the \"linksquared\" parameter, or null if not found.\n   */\n  static getLinksquaredPath() {\n    const url = window.location.href;\n    // Create a new URLSearchParams object with the URL string\n    const params = new URLSearchParams(url.split(\"?\")[1]);\n\n    // Get the value of the \"linksquared\" parameter\n    const linksquaredValue = params.get(\"linksquared\");\n\n    return linksquaredValue;\n  }\n}\n\n// Export the LinksquaredDeviceDetails class\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LinksquaredDeviceDetails);\n\n\n//# sourceURL=webpack://Linksquared/./src/linksquared_device_details.js?");

/***/ }),

/***/ "./src/linksquared_events_manager.js":
/*!*******************************************!*\
  !*** ./src/linksquared_events_manager.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _linksquared_api_service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./linksquared_api_service.js */ \"./src/linksquared_api_service.js\");\n/* harmony import */ var _linksquared_device_details_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./linksquared_device_details.js */ \"./src/linksquared_device_details.js\");\n// Import necessary modules\n\n\n\n/**\n * Represents an event.\n */\nclass Event {\n  /**\n   * Constructs an Event instance.\n   * @param {string} type - The type of the event.\n   * @param {number} createdAt - The timestamp when the event occurred.\n   * @param {string|null} [path=null] - The path associated with the event.\n   * @param {number|null} [engagementTime=null] - The engagement time for the event.\n   */\n  constructor(type, createdAt, path = null, engagementTime = null) {\n    this.type = type;\n    this.createdAt = createdAt;\n    this.path = path;\n    this.engagementTime = engagementTime;\n  }\n}\n\n/**\n * Manages the storage of events.\n */\nclass EventsStorage {\n  /**\n   * Constructs an EventsStorage instance.\n   * Loads events from localStorage or initializes as an empty array.\n   */\n  constructor() {\n    this.events = JSON.parse(localStorage.getItem(\"linksquared-events\")) || [];\n  }\n\n  /**\n   * Get all stored events.\n   * @returns {Array} All stored events.\n   */\n  getEvents() {\n    return this.events;\n  }\n\n  /**\n   * Store events to localStorage.\n   */\n  storeEventsLocally() {\n    localStorage.setItem(\"linksquared-events\", JSON.stringify(this.events));\n  }\n\n  /**\n   * Store a single event.\n   * @param {Event} event - The event to store.\n   */\n  storeEvent(event) {\n    this.events.push(event);\n    this.storeEventsLocally();\n  }\n\n  /**\n   * Store multiple events.\n   * @param {Array<Event>} events - Array of events to store.\n   */\n  storeEvents(events) {\n    this.events.push(...events);\n    this.storeEventsLocally();\n  }\n\n  /**\n   * Delete an event by object reference.\n   * @param {Event} eventToDelete - The event to delete.\n   */\n  deleteEvent(eventToDelete) {\n    this.events = this.events.filter((event) => event !== eventToDelete);\n    this.storeEventsLocally();\n  }\n\n  /**\n   * Get and remove all events.\n   * @returns {Array} All stored events.\n   */\n  getAndRemoveAllEvents() {\n    const eventsToReturn = this.events;\n    this.events = [];\n    this.storeEventsLocally();\n    return eventsToReturn;\n  }\n\n  /**\n   * Set timestamp to localStorage.\n   * @param {number} timestamp - The timestamp to set.\n   */\n  setTimestamp(timestamp) {\n    localStorage.setItem(\n      \"linksquared-events-timestamp\",\n      JSON.stringify(timestamp)\n    );\n  }\n\n  /**\n   * Get timestamp from localStorage.\n   * @returns {number|null} The timestamp from localStorage.\n   */\n  getTimestamp() {\n    const storedTimestamp = localStorage.getItem(\n      \"linksquared-events-timestamp\"\n    );\n    return storedTimestamp ? JSON.parse(storedTimestamp) : null;\n  }\n}\n\n/**\n * Manages events and their handling.\n */\nclass LinksquaredEventsManager {\n  /**\n   * Constructs a LinksquaredEventsManager instance.\n   * Initializes Linksquared API service, EventsStorage, and lastTimestamp.\n   */\n  constructor() {\n    this.service = new _linksquared_api_service_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    this.eventsStorage = new EventsStorage();\n    this.lastTimestamp = Date.now();\n\n    const storedTimestamp = this.eventsStorage.getTimestamp();\n    if (storedTimestamp) {\n      this.setTimeSpent();\n      this.lastTimestamp = storedTimestamp;\n    }\n\n    this.eventsStorage.setTimestamp(this.lastTimestamp);\n    this.handleFocus();\n  }\n\n  /**\n   * Flush events.\n   */\n  flushEvents() {\n    this.flushEvents();\n  }\n\n  /**\n   * Add event.\n   * @param {string} type - The type of the event.\n   */\n  addEvent(type) {\n    const event = new Event(\n      type,\n      Date.now(),\n      _linksquared_device_details_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getLinksquaredPath(),\n      null\n    );\n    this.eventsStorage.storeEvent(event);\n  }\n\n  /**\n   * Add event and flush.\n   * @param {string} type - The type of the event.\n   */\n  addEventWithFlush(type) {\n    this.addEvent(type);\n    this.flushEvents();\n  }\n\n  /**\n   * Handle focus event.\n   * @private\n   */\n  handleFocus() {\n    const self = this;\n    window.addEventListener(\"focus\", function () {\n      self.setTimeSpent();\n    });\n  }\n\n  /**\n   * Set time spent on page.\n   * @private\n   */\n  setTimeSpent() {\n    const storedTimestamp = this.eventsStorage.getTimestamp();\n    if (storedTimestamp) {\n      const currentTimestamp = Date.now();\n      const differenceInMilliseconds = Math.abs(\n        currentTimestamp - this.lastTimestamp\n      );\n      const differenceInSeconds = Math.floor(differenceInMilliseconds / 1000);\n      this.setSecondsToEvents(differenceInSeconds);\n      this.eventsStorage.setTimestamp(null);\n    }\n  }\n\n  /**\n   * Set seconds to events.\n   * @param {number} seconds - The seconds to set.\n   * @private\n   */\n  setSecondsToEvents(seconds) {\n    const events = this.eventsStorage.getAndRemoveAllEvents();\n    events.forEach((event) => {\n      if (event.engagementTime == null) {\n        event.engagementTime = seconds;\n      }\n    });\n    this.eventsStorage.storeEvents(events);\n  }\n\n  /**\n   * Flush events.\n   * @private\n   */\n  flushEvents() {\n    this.setPathIfNeeded();\n    const events = this.eventsStorage.getEvents();\n    events.forEach((event) => {\n      this.sendAndDeleteEvent(event);\n    });\n  }\n\n  /**\n   * Set path if needed.\n   * @private\n   */\n  setPathIfNeeded() {\n    const path = _linksquared_device_details_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getLinksquaredPath();\n    if (!path) {\n      return;\n    }\n    const events = this.eventsStorage.getAndRemoveAllEvents();\n    events.forEach((event) => {\n      if (event.path == null) {\n        event.path = path;\n      }\n    });\n    this.eventsStorage.storeEvents(events);\n  }\n\n  /**\n   * Send and delete event.\n   * @param {Event} event - The event to send and delete.\n   * @private\n   */\n  sendAndDeleteEvent(event) {\n    const self = this;\n    this.service.createEvent(\n      event.type,\n      event.createdAt,\n      event.path,\n      event.engagementTime,\n      (response) => {\n        self.eventsStorage.deleteEvent(event);\n      },\n      (error) => {\n        // Handle error if needed\n      }\n    );\n  }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LinksquaredEventsManager);\n\n\n//# sourceURL=webpack://Linksquared/./src/linksquared_events_manager.js?");

/***/ }),

/***/ "./src/linksquared_manager.js":
/*!************************************!*\
  !*** ./src/linksquared_manager.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _linksquared_api_service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./linksquared_api_service.js */ \"./src/linksquared_api_service.js\");\n/* harmony import */ var _linksquared_events_manager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./linksquared_events_manager.js */ \"./src/linksquared_events_manager.js\");\n/* harmony import */ var _linksquared_context_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./linksquared_context.js */ \"./src/linksquared_context.js\");\n/* harmony import */ var _linksquared_device_details_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./linksquared_device_details.js */ \"./src/linksquared_device_details.js\");\n/* harmony import */ var _linksquared_ui_helper_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./linksquared_ui_helper.js */ \"./src/linksquared_ui_helper.js\");\n\n\n\n\n\n\n/**\n * Manages interactions with the Linksquared API and event handling.\n */\nclass LinksquaredManager {\n  /**\n   * Creates an instance of LinksquaredManager.\n   * @param {string} APIKey - The API key for authentication.\n   * @param {Function} linkHandlingCallback - Callback function to handle Linksquared data.\n   */\n  constructor(APIKey, linkHandlingCallback) {\n    _linksquared_context_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].API_KEY = APIKey;\n\n    this.linkHandlingCallback = linkHandlingCallback;\n    this.service = new _linksquared_api_service_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    this.eventsManager = new _linksquared_events_manager_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n    this.authenticated = false;\n    this.shouldUpdateIdentifiers = false;\n    this.uiHelper = new _linksquared_ui_helper_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\n    this.receivedData = [];\n  }\n\n  // MARK: Methods\n\n  /**\n   * Authenticates with the Linksquared API.\n   */\n  authenticate(succesfullAuthenticatedCallback) {\n    let details = _linksquared_device_details_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].currentDetails();\n\n    const self = this;\n    this.service.authenticateDevice(\n      details,\n      /**\n       * Success callback for authentication.\n       * @param {Object} response - The authentication response.\n       */\n      (response) => {\n        let linksquaredID = response.linksquared;\n        let identifier = response.sdk_identifier;\n        let attributes = response.sdk_attributes;\n\n        console.log(\"authenticate response: \", response);\n\n        _linksquared_context_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].setLinksquaredIDCookie(linksquaredID);\n\n        if (!self.shouldUpdateIdentifiers) {\n          _linksquared_context_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].USER_ATTRIBUTES = identifier;\n          _linksquared_context_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].USER_IDENTIFIER = attributes;\n        }\n\n        self.authenticated = true;\n\n        if (succesfullAuthenticatedCallback) {\n          succesfullAuthenticatedCallback();\n        }\n        self.#handleFetchData();\n        self.#updateUserAttributesIfNeeded();\n        self.eventsManager.flushEvents();\n      },\n      /**\n       * Error callback for authentication.\n       * @param {Object} error - The authentication error.\n       */\n      (error) => {\n        console.log(error);\n        console.log(\"Linksquared - wrong credentials, the SDK will NOT work!\");\n      }\n    );\n  }\n\n  /**\n   * Sets the user identifier.\n   * @param {string} identifier - The user identifier.\n   */\n  setUserIdentifier(identifier) {\n    _linksquared_context_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].USER_IDENTIFIER = identifier;\n\n    if (!this.authenticated) {\n      this.shouldUpdateIdentifiers = true;\n    }\n\n    this.#updateUserAttributesIfNeeded();\n  }\n\n  /**\n   * Sets the user attributes.\n   * @param {Object} attributes - A dictionary of user attributes.\n   */\n  setUserAttributes(attributes) {\n    _linksquared_context_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].USER_ATTRIBUTES = attributes;\n\n    if (!this.authenticated) {\n      this.shouldUpdateIdentifiers = true;\n    }\n\n    this.#updateUserAttributesIfNeeded();\n  }\n\n  /**\n   * Retrieves the user identifier from the LinksquaredContext.\n   * @returns {string|null} The user identifier. Null if not authenticated.\n   */\n  userIdentifier() {\n    return _linksquared_context_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].USER_IDENTIFIER;\n  }\n\n  /**\n   * Retrieves the user attributes from the LinksquaredContext.\n   * @returns {Object|null} The user attributes. Null if not authenticated.\n   */\n  userAttributes() {\n    return _linksquared_context_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].USER_ATTRIBUTES;\n  }\n\n  /**\n   * Creates a link with the Linksquared API.\n   * @param {string} title - The title of the link.\n   * @param {string} subtitle - The subtitle of the link.\n   * @param {string} imageURL - The URL of the image associated with the link.\n   * @param {Object} data - Additional data for the link.\n   * @param {Function} success - Success callback for creating the link.\n   * @param {Function} error - Error callback for creating the link.\n   */\n  createLink(title, subtitle, imageURL, data, success, error) {\n    if (!this.authenticated) {\n      error(\"The linksquared SDK is not yet initialized, try again later!\");\n    }\n\n    this.service.createLink(\n      title,\n      subtitle,\n      imageURL,\n      data,\n      /**\n       * Success callback for creating the link.\n       * @param {Object} response - The response from creating the link.\n       */\n      (response) => {\n        if (response.link) {\n          success(response.link);\n          return;\n        }\n\n        error(\n          \"You must configure the redirect rules in the Web interface first\"\n        );\n      },\n      error\n    );\n  }\n\n  showMessagesList() {\n    this.uiHelper.showMessagesList();\n  }\n\n  getMessages(page, response, error) {\n    this.service.messagesForDevice(page, response, error);\n  }\n\n  getNumberOfUnreadMessages(response, error) {\n    this.service.numberOfUnreadMessages(response, error);\n  }\n\n  /**\n   * Returns all the received data.\n   * @returns {Array} Array of all received data objects.\n   */\n  getAllReceivedData() {\n    return this.receivedData;\n  }\n\n  markMessageAsRead(message, response, error) {\n    this.service.markMessageAsViewed(message, response, error);\n  }\n\n  // MARK: Private\n\n  #displayAutomaticMessages() {\n    this.service.messagesForAutomaticDisplay(\n      (response) => {\n        const notifications = response.notifications;\n        notifications.forEach((item) => {\n          this.uiHelper.openPage(item);\n        });\n      },\n      (error) => {\n        console.log(\"Linksquared -- could not get automatic notifications!\");\n      }\n    );\n  }\n\n  /**\n   * Handles fetching data from Linksquared API.\n   * Determines whether to fetch data for the current device or a specific path.\n   * @private\n   */\n  #handleFetchData() {\n    const linksquaredValue = _linksquared_device_details_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getLinksquaredPath();\n    if (linksquaredValue) {\n      this.#handleLinksquaredValue(linksquaredValue);\n    } else {\n      this.#handleDataForDevice();\n    }\n\n    this.#displayAutomaticMessages();\n  }\n\n  /**\n   * Handles fetching data for a specific path from Linksquared API.\n   * @param {string} path - The path for which to fetch data.\n   * @private\n   */\n  #handleLinksquaredValue(path) {\n    let details = _linksquared_device_details_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].currentDetails();\n\n    this.service.payloadForDeviceAndPath(\n      details,\n      path,\n      /**\n       * Success callback for fetching data for a specific path.\n       * @param {Object} response - The response data.\n       */\n      (response) => {\n        this.#handleDataReceived(response.data);\n      },\n      /**\n       * Error callback for fetching data for a specific path.\n       * @param {Object} error - The error object.\n       */\n      (error) => {\n        console.log(\"Linksquared -- could not fetch data!\");\n      }\n    );\n  }\n\n  /**\n   * Handles fetching data for the current device from Linksquared API.\n   * @private\n   */\n  #handleDataForDevice() {\n    let details = _linksquared_device_details_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].currentDetails();\n    const self = this;\n\n    this.service.payloadForDevice(\n      details,\n      /**\n       * Success callback for fetching data for the current device.\n       * @param {Object} response - The response data.\n       */\n      (response) => {\n        self.#handleDataReceived(response.data);\n      },\n      /**\n       * Error callback for fetching data for the current device.\n       * @param {Object} error - The error object.\n       */\n      (error) => {\n        console.log(\"Linksquared -- could not fetch data!\");\n      }\n    );\n  }\n\n  /**\n   * Handles received data from Linksquared API.\n   * @param {Object} data - The received data.\n   * @private\n   */\n  #handleDataReceived(data) {\n    if (data) {\n      this.receivedData.push(data);\n      this.linkHandlingCallback(data);\n    }\n  }\n\n  #updateUserAttributesIfNeeded() {\n    if (!this.authenticated) {\n      return;\n    }\n\n    const self = this;\n    this.service.setUserAttributes(\n      (response) => {\n        self.shouldUpdateIdentifiers = false;\n      },\n      /**\n       * Error callback for fetching data for the current device.\n       * @param {Object} error - The error object.\n       */\n      (error) => {\n        console.log(\"Linksquared -- could not set identifiers!\");\n      }\n    );\n  }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LinksquaredManager);\n\n\n//# sourceURL=webpack://Linksquared/./src/linksquared_manager.js?");

/***/ }),

/***/ "./src/linksquared_ui_helper.js":
/*!**************************************!*\
  !*** ./src/linksquared_ui_helper.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _linksquared_api_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./linksquared_api_service */ \"./src/linksquared_api_service.js\");\n\n\nclass LinksquaredUIHelper {\n  constructor() {\n    this.service = new _linksquared_api_service__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    this.page = 1;\n    this.isLoading = false;\n\n    this.htmlContent = `\n    <!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Messages</title>\n    <link\n      href=\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;600;700&display=swap\"\n      rel=\"stylesheet\"\n    />\n    <style>\n      body,\n      html {\n        margin: 0;\n        padding: 0;\n        height: 100%;\n        width: 100%;\n        overflow: hidden; /* Prevent scrolling when modal is open */\n\n        font-family: \"Open Sans\", sans-serif; /* Use Open Sans font */\n        background-color: #f0f0f0; /* Background color for contrast */\n        margin: 0; /* Remove default margin */\n      }\n      .modal {\n        display: flex;\n        flex-direction: column; /* Column layout for modal content */\n        left: 0;\n        height: 100%; /* Full viewport height */\n        backdrop-filter: blur(10px); /* Blurring effect for the background */\n        color: white; /* Text color */\n        z-index: 1000;\n        padding: 30px; /* Padding for modal */\n        padding-bottom: 0px;\n        box-sizing: border-box; /* Include padding in width/height calculations */\n        border-radius: 30px;\n        background-color: rgba(0, 0, 0, 0.5);\n        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2); /* Shadow effect */\n      }\n      .modal-content {\n        flex-grow: 1; /* Allow content to grow */\n        border-radius: 10px; /* Rounded corners for the content box */\n        position: relative; /* Relative positioning for the close button */\n        overflow: hidden; /* Hide overflow */\n      }\n\n      #closeModalBtn {\n        width: 40px;\n        height: 40px;\n        border: none; /* Remove border */\n        background: transparent; /* Make background transparent */\n        cursor: pointer; /* Change cursor on hover */\n        display: flex; /* Use flexbox for centering */\n        justify-content: center; /* Center the SVG horizontally */\n        align-items: center; /* Center the SVG vertically */\n        z-index: 1; /* Ensure button is above other content */\n        padding: 0; /* Remove any padding */\n        margin: 0; /* Remove any margin */\n      }\n      .header {\n        position: sticky; /* Stick the header to the top */\n        top: 0; /* Position it at the top */\n        z-index: 1; /* Ensure it is above the scrolling content */\n        display: flex; /* Use flexbox layout */\n        justify-content: space-between; /* Space between the title and the close button */\n        align-items: center; /* Center items vertically */\n        height: 40px;\n        margin-bottom: 20px;\n      }\n      .item-list {\n        max-height: calc(\n          100vh - 30vh - 150px\n        ); /* Adjust this value to leave space for header and button */\n        overflow-y: auto; /* Enable vertical scrolling */\n      }\n      .item {\n        display: flex; /* Flex layout for each item */\n        justify-content: space-between; /* Space between title/subtitle and right arrow */\n        align-items: center; /* Center vertically */\n        padding: 10px;\n        border-bottom: 1px solid rgba(255, 255, 255, 0.3); /* Separator line */\n        cursor: pointer; /* Pointer cursor on hover */\n      }\n      .indicator {\n        width: 10px; /* Width of the blue indicator */\n        height: 10px; /* Height of the blue indicator */\n        border-radius: 50%; /* Make it circular */\n        background-color: blue; /* Blue color */\n        margin-right: 10px; /* Space between indicator and title */\n      }\n      .right-arrow {\n        margin-left: 10px; /* Space between item text and arrow */\n        color: white; /* Color of the right arrow */\n      }\n      .title {\n        font-size: 24px;\n        font-weight: 600;\n        padding-left: 10px;\n      }\n      .list-item {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n      .indicator {\n        background-color: #298dfa;\n      }\n      .item-title {\n        font-size: 17px;\n        font-weight: 600;\n        color: white;\n      }\n      .item-subtitle {\n        color: rgba(255, 255, 255, 0.5);\n      }\n      .list-title {\n        padding-left: 10px;\n      }\n      .spinner-overlay {\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        z-index: 2000; /* Higher than modal */\n      }\n      .spinner {\n        width: 40px;\n        height: 40px;\n        border: 4px solid rgba(255, 255, 255, 0.3);\n        border-top-color: #fff;\n        border-radius: 50%;\n        animation: spin 1s linear infinite;\n      }\n      @keyframes spin {\n        to {\n          transform: rotate(360deg);\n        }\n      }\n    </style>\n  </head>\n  <body>\n    <div id=\"spinner\" class=\"spinner-overlay\">\n      <div class=\"spinner\"></div>\n    </div>\n    <div class=\"modal\">\n      <div class=\"modal-content\">\n        <div class=\"header\">\n          <h1 class=\"title\">Messages</h1>\n          <button id=\"closeModalBtn\">\n            <svg\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 95 95\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                d=\"M47.5 0C21.266 0 0 21.266 0 47.5C0 73.734 21.266 95 47.5 95C73.734 95 95 73.734 95 47.5C94.9727 21.277 73.723 0.027 47.5 0ZM66.133 60.535C67.7072 62.0545 67.7502 64.5584 66.2307 66.1327C64.7112 67.7069 62.2073 67.7499 60.633 66.2304C60.6017 66.1991 60.5666 66.1679 60.5353 66.1327L47.5003 53.0977L34.4653 66.1327C32.8911 67.6522 30.3872 67.6093 28.8676 66.035C27.3871 64.4998 27.3871 62.0702 28.8676 60.535L41.9026 47.5L28.8676 34.465C27.3481 32.8908 27.391 30.3869 28.9653 28.8673C30.5005 27.3868 32.9301 27.3868 34.4653 28.8673L47.5003 41.9023L60.5353 28.8673C62.1095 27.3478 64.6134 27.3907 66.133 28.965C67.6135 30.5002 67.6135 32.9298 66.133 34.465L53.098 47.5L66.133 60.535Z\"\n                fill=\"white\"\n              />\n            </svg>\n          </button>\n        </div>\n        <div class=\"item-list\" id=\"itemList\">\n          <!-- Item list will be populated here -->\n        </div>\n      </div>\n    </div>\n  </body>\n</html>\n  `;\n  }\n\n  showMessagesList() {\n    // Create modal overlay\n    const modalOverlay = document.createElement(\"div\");\n    modalOverlay.id = \"linksquared-modal\";\n    modalOverlay.style.position = \"fixed\";\n    modalOverlay.style.top = \"15%\";\n    modalOverlay.style.left = \"15%\";\n    modalOverlay.style.width = \"70%\";\n    modalOverlay.style.height = \"70%\";\n    modalOverlay.style.zIndex = \"1000\"; // Ensure it sits on top\n\n    modalOverlay.innerHTML = this.htmlContent;\n    // Append modal overlay to body\n    document.body.appendChild(modalOverlay);\n\n    this.#loadMessages();\n    // Add event listener to close the modal\n    document.getElementById(\"closeModalBtn\").addEventListener(\"click\", () => {\n      document.body.removeChild(modalOverlay); // Remove the modal from the DOM\n    });\n    // Close modal when clicking outside of modal content\n    modalOverlay.addEventListener(\"click\", (event) => {\n      if (event.target === modalOverlay) {\n        document.body.removeChild(modalOverlay); // Remove the modal from the DOM\n      }\n    });\n    const itemsListHTML = document.getElementById(\"itemList\");\n    if (itemsListHTML) {\n      // Add scroll event listener to load next page when scrolling past half\n      itemsListHTML.addEventListener(\"scroll\", () => {\n        if (this.isLoading) return; // Prevent multiple concurrent loads\n        const scrollPosition = itemsListHTML.scrollTop;\n        const modalHeight =\n          itemsListHTML.scrollHeight - itemsListHTML.clientHeight;\n        // Load next page if scrolled past halfway\n        if (scrollPosition >= modalHeight / 2) {\n          this.isLoading = true;\n          this.page += 1;\n          this.#loadMessages();\n        }\n      });\n    }\n  }\n\n  openPage(notification) {\n    // Create a full-screen modal for the iframe\n    const iframeModal = document.createElement(\"div\");\n    iframeModal.style.position = \"fixed\";\n    iframeModal.style.top = \"0\";\n    iframeModal.style.left = \"0\";\n    iframeModal.style.width = \"100%\";\n    iframeModal.style.height = \"100%\";\n    iframeModal.style.zIndex = \"1002\"; // Ensure it sits above other content\n    iframeModal.style.backgroundColor = \"rgba(0, 0, 0, 0.5)\"; // Dark background\n    iframeModal.style.background = \"red\";\n    // Create header for the iframe modal\n    const modalHeader = document.createElement(\"div\");\n    modalHeader.style.display = \"flex\";\n    modalHeader.style.justifyContent = \"space-between\";\n    modalHeader.style.alignItems = \"center\";\n    modalHeader.style.padding = \"10px\";\n    modalHeader.style.color = \"white\";\n    modalHeader.style.height = \"20px\";\n    const headerTitle = document.createElement(\"h2\");\n    modalHeader.appendChild(headerTitle);\n    const closeButton = document.createElement(\"div\");\n    closeButton.style.cursor = \"pointer\";\n    closeButton.style.width = \"24px\";\n    closeButton.style.height = \"24px\";\n    closeButton.style.marginRight = \"20px\";\n    closeButton.onclick = () => {\n      document.body.removeChild(iframeModal); // Remove the modal from the DOM\n    };\n    closeButton.innerHTML = `\n          <svg\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 95 95\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M47.5 0C21.266 0 0 21.266 0 47.5C0 73.734 21.266 95 47.5 95C73.734 95 95 73.734 95 47.5C94.9727 21.277 73.723 0.027 47.5 0ZM66.133 60.535C67.7072 62.0545 67.7502 64.5584 66.2307 66.1327C64.7112 67.7069 62.2073 67.7499 60.633 66.2304C60.6017 66.1991 60.5666 66.1679 60.5353 66.1327L47.5003 53.0977L34.4653 66.1327C32.8911 67.6522 30.3872 67.6093 28.8676 66.035C27.3871 64.4998 27.3871 62.0702 28.8676 60.535L41.9026 47.5L28.8676 34.465C27.3481 32.8908 27.391 30.3869 28.9653 28.8673C30.5005 27.3868 32.9301 27.3868 34.4653 28.8673L47.5003 41.9023L60.5353 28.8673C62.1095 27.3478 64.6134 27.3907 66.133 28.965C67.6135 30.5002 67.6135 32.9298 66.133 34.465L53.098 47.5L66.133 60.535Z\"\n              fill=\"white\"\n            />\n          </svg>\n        `;\n    modalHeader.appendChild(closeButton);\n    iframeModal.appendChild(modalHeader);\n    console.log(\"notification\", notification);\n    // Create iframe\n    const iframe = document.createElement(\"iframe\");\n    iframe.src = notification.access_url;\n    iframe.style.width = \"100%\";\n    iframe.style.height = \"calc(100% - 20px)\"; // Adjust height to account for header\n    iframe.style.border = \"none\"; // Remove iframe border\n    // Append header and iframe to modal\n    iframeModal.appendChild(modalHeader);\n    iframeModal.appendChild(iframe);\n    // Append iframe modal to body\n    document.body.appendChild(iframeModal);\n    // // Mark the item as viewd\n    // this.#markItemAsViewed(notification);\n  }\n\n  //   Private methods\n\n  #markItemAsViewed(notification) {\n    this.service.markMessageAsViewed(\n      notification,\n      (response) => {\n        this.page = 1;\n        this.#loadMessages();\n      },\n      (error) => {\n        console.log(\"Linksquared -- could not mark the message as viewed!\");\n      }\n    );\n  }\n\n  #loadMessages() {\n    const spinner = document.getElementById(\"spinner\");\n    spinner.style.display = \"flex\";\n    this.isLoading = true;\n\n    this.service.messagesForDevice(\n      this.page,\n      (response) => {\n        spinner.style.display = \"none\";\n        this.isLoading = false; // Reset loading state\n        console.log(\"messagesForDevice: \", response);\n\n        if (this.page == 1) {\n          const itemList = document.getElementById(\"itemList\");\n          itemList.innerHTML = \"\";\n        }\n\n        this.#refreshItemsList(response.notifications);\n      },\n      (error) => {\n        this.isLoading = false;\n        spinner.style.display = \"none\";\n        console.log(\"Linksquared -- could not get messages!\");\n      }\n    );\n  }\n\n  #refreshItemsList(items) {\n    items.forEach((item) => {\n      const itemDiv = document.createElement(\"div\");\n      itemDiv.className = \"item\";\n      itemDiv.style.display = \"flex\";\n      itemDiv.style.justifyContent = \"space-between\";\n      itemDiv.style.alignItems = \"center\";\n      itemDiv.style.padding = \"20px\";\n      itemDiv.style.borderBottom = \"1px solid rgba(255, 255, 255, 0.2)\";\n      itemDiv.style.cursor = \"pointer\";\n      itemDiv.innerHTML = `\n              <div class=\"list-item\">\n                  <div class=\"indicator\" style=\"width: 10px; height: 10px; border-radius: 50%; margin-right: 10px; display: ${\n                    item.read ? \"none\" : \"block\"\n                  }\"></div>\n                  <div class=\"list-title\">\n                    <strong class=\"item-title\">${item.title}</strong><br />\n                    <span class=\"item-subtitle\">${item.subtitle}</span>\n                  </div>\n              </div>\n              <svg width=\"10\" height=\"20\" viewBox=\"0 0 54 95\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path d=\"M5.65 94.9627C4.25 94.9627 2.75 94.4627 1.65 93.3627C-0.55 91.1627 -0.55 87.6627 1.65 85.4627L39.55 47.4627L1.65 9.56272C-0.55 7.36272 -0.55 3.86272 1.65 1.66272C3.85 -0.537282 7.35 -0.537282 9.55 1.56272L51.45 43.4627C52.55 44.5627 53.05 45.9627 53.05 47.4627C53.05 48.9627 52.45 50.3627 51.45 51.4627L9.55 93.3627C8.45 94.4627 7.05 94.9627 5.65 94.9627Z\" fill=\"white\" fill-opacity=\"0.2\"/>\n  </svg>\n  \n  </span>\n          `;\n      itemDiv.onclick = () => {\n        this.openPage(item);\n      };\n      itemList.appendChild(itemDiv);\n    });\n  }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LinksquaredUIHelper);\n\n\n//# sourceURL=webpack://Linksquared/./src/linksquared_ui_helper.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});